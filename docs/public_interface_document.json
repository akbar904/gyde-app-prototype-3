{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "A Flutter project using the Stacked architecture, featuring an onboarding flow for a luxury chauffeur service app called Gyde, with routing, dependency injection, and dialog/bottom sheet management. The onboarding views now utilize ViewModels for enhanced separation of concerns.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The app includes an onboarding flow with multiple pages and sliding transitions, each managed by its own ViewModel.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "features": {
        "onboarding": {
          "welcome_view.dart": {},
          "welcome_view_model.dart": {},
          "auth_options_view.dart": {},
          "auth_options_view_model.dart": {},
          "phone_input_view.dart": {},
          "phone_input_view_model.dart": {},
          "verification_code_view.dart": {},
          "verification_code_view_model.dart": {},
          "email_collection_view.dart": {},
          "email_collection_view_model.dart": {},
          "welcome_confirmation_view.dart": {},
          "welcome_confirmation_view_model.dart": {},
          "terms_conditions_view.dart": {},
          "terms_conditions_view_model.dart": {}
        }
      },
      "ui": {
        "bottom_sheets": {
          "notice": {
            "notice_sheet.dart": {},
            "notice_sheet_model.dart": {}
          }
        },
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        },
        "dialogs": {
          "info_alert": {
            "info_alert_dialog.dart": {},
            "info_alert_dialog_model.dart": {}
          }
        }
      },
      "main.dart": {}
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes for the onboarding flow (WelcomeView, AuthOptionsView, PhoneInputView, VerificationCodeView, EmailCollectionView, WelcomeConfirmationView, TermsConditionsView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/onboarding/welcome_view.dart",
        "package:my_app/features/onboarding/auth_options_view.dart",
        "package:my_app/features/onboarding/phone_input_view.dart",
        "package:my_app/features/onboarding/verification_code_view.dart",
        "package:my_app/features/onboarding/email_collection_view.dart",
        "package:my_app/features/onboarding/welcome_confirmation_view.dart",
        "package:my_app/features/onboarding/terms_conditions_view.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_view.dart",
      "description": "The welcome page of the onboarding flow, introducing the service and prompting the user to get started. It now uses WelcomeViewModel for business logic.",
      "class_diagram": "@startuml\nclass WelcomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/welcome_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_view_model.dart",
      "description": "ViewModel for WelcomeView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass WelcomeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/auth_options_view.dart",
      "description": "The authentication options page, allowing users to continue with phone or email. It now uses AuthOptionsViewModel for business logic.",
      "class_diagram": "@startuml\nclass AuthOptionsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/auth_options_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/auth_options_view_model.dart",
      "description": "ViewModel for AuthOptionsView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass AuthOptionsViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/phone_input_view.dart",
      "description": "The phone number input page for entering and verifying the user's phone number. It now uses PhoneInputViewModel for business logic.",
      "class_diagram": "@startuml\nclass PhoneInputView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/phone_input_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/phone_input_view_model.dart",
      "description": "ViewModel for PhoneInputView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass PhoneInputViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/verification_code_view.dart",
      "description": "The verification code page for entering the code sent to the user's phone. It now uses VerificationCodeViewModel for business logic.",
      "class_diagram": "@startuml\nclass VerificationCodeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/verification_code_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/verification_code_view_model.dart",
      "description": "ViewModel for VerificationCodeView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass VerificationCodeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/email_collection_view.dart",
      "description": "The email collection page for gathering the user's email address. It now uses EmailCollectionViewModel for business logic.",
      "class_diagram": "@startuml\nclass EmailCollectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/email_collection_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/email_collection_view_model.dart",
      "description": "ViewModel for EmailCollectionView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass EmailCollectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_confirmation_view.dart",
      "description": "The welcome confirmation page, confirming the user's registration and access to services. It now uses WelcomeConfirmationViewModel for business logic.",
      "class_diagram": "@startuml\nclass WelcomeConfirmationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/welcome_confirmation_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_confirmation_view_model.dart",
      "description": "ViewModel for WelcomeConfirmationView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass WelcomeConfirmationViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/terms_conditions_view.dart",
      "description": "The terms and conditions page, displaying the terms of use for the service. It now uses TermsConditionsViewModel for business logic.",
      "class_diagram": "@startuml\nclass TermsConditionsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "package:my_app/features/onboarding/terms_conditions_view_model.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/terms_conditions_view_model.dart",
      "description": "ViewModel for TermsConditionsView, handling the business logic and state management.",
      "class_diagram": "@startuml\nclass TermsConditionsViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/onboarding/welcome_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant WelcomeView\nparticipant AuthOptionsView\nparticipant PhoneInputView\nparticipant VerificationCodeView\nparticipant EmailCollectionView\nparticipant WelcomeConfirmationView\nparticipant TermsConditionsView\n\nUser -> main: Launch app\nmain -> WelcomeView: Initialize\nUser -> WelcomeView: Get Started\nWelcomeView -> AuthOptionsView: Navigate\nUser -> AuthOptionsView: Choose Auth Option\nAuthOptionsView -> PhoneInputView: Navigate with Phone\nUser -> PhoneInputView: Enter Phone\nPhoneInputView -> VerificationCodeView: Navigate\nUser -> VerificationCodeView: Enter Code\nVerificationCodeView -> EmailCollectionView: Navigate\nUser -> EmailCollectionView: Enter Email\nEmailCollectionView -> WelcomeConfirmationView: Navigate\nUser -> WelcomeConfirmationView: Continue\nWelcomeConfirmationView -> TermsConditionsView: Navigate\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs the WelcomeView. The onboarding flow consists of multiple pages with sliding transitions, managed by the Stacked Router defined in app.router.dart. Each page leads to the next in the sequence, allowing users to progress through the onboarding process."
}